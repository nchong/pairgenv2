{% from 'macros/parameter.jinja' import localassign, assign, assigninv %}
#ifndef {{ headername }}_BPA_H
#define {{ headername }}_BPA_H
{% block extraheaders %}
{% endblock %}

/*
 * Block-per-particle decomposition.
 *
 * Given N particles,
 *  d_<var>[i]
 *  is the particle data for particle i
 *
 *  numneigh[i] 
 *  is the number of neighbors for particle i
 *
 *  neighidx[offset[i] + jj]
 *  is the index j of the jj-th neighbor to particle i
 *
 * We assign one block per particle i.
 * Each thread within a block is assigned one of the numneigh[i] neighbors of i.
 * NB: This kernel does not update any neighbor particles.
 *     Therefore the neighbor list must contain symmetric duplicates.
 */
{% block kqualifier -%}{%- endblock %} void {{name}}_bpa(
  {% block kparameters %}
  {% endblock %}
) {
  {% block sharedmem %} {% endblock %}

  // register copies of per-particle and per-neighbor data
  {%- for p in params if not p.is_type('P', 'SUM') -%}
    {%- for n in p.tagged_name() %}
  {{ p.type }} {{ n }}{{ "[%d]" % p.dim if p.dim == 3 }};
    {%- endfor -%}
  {% endfor %}

  {% block kidx %} {# define lid, idx and block_size #} {% endblock %}
  int nneigh = numneigh[idx];
  int nidx_base = offset[idx];

  // load particle(i) data into shared memory
  {%- for k in range(maxdim) %}
  if (lid == {{ k }}) {
    {%- for p in params if p.is_type('P', 'RO') and p.dim > k %}
    {{ p.name(pre='local_') }}[{{ k }}] = {{ p.devname() }}[(idx*{{ p.dim }})+{{ k }}];
    {%- endfor %}
  }
  {%- endfor %}
  {% block memfence %} {% endblock %}

  {% for p in params if p.is_type('P', 'SUM') %}
  {{- "// per-thread accumulators" if loop.first -}}
    {%- if p.dim > 1 %}
  {{ p.type }} {{ p.name(suf='i_delta') }}[{{ p.dim }}] = {{ p.additive_id() }};
    {%- else %}
  {{ p.type }} {{ p.name(suf='i_delta') }} = {{ p.additive_id() }};
    {%- endif %}
  {%- else -%}
  {%- endfor %}

  // load particle i data
  {% for p in params if p.is_type('P', 'RO') %}
  {{- "// per-particle RO data" if loop.first -}}
  {{- localassign(p, 'i', idx=None) -}}
  {%- else -%}
  {%- endfor %}
  {#- TODO: DEAL WITH P,RW DATA #}

  if (idx < N && nneigh > 0) {
    for (int jjbase=0; jjbase<nneigh; jjbase+=block_size) {
      int gidx_base = nidx_base + jjbase; {# THE FOLLOWING IS DANGEROUS AND MAY SEGFAULT #}
      {%- for k in range(maxdim) %}
        {%- for p in params if p.is_type('N', '-') and k < p.dim %}
      {{ p.name(pre='local_') }}[(BLOCK_SIZE*{{ k }})+lid] = {{ p.devname() }}[(gidx_base*{{ p.dim }})+(BLOCK_SIZE*{{ k }})+lid];
        {%- endfor %}
      {%- endfor %}
      {{ self.memfence() }}

      int jj = jjbase + lid;
      if (jj < nneigh) {
        // load particle j data
        int nidx = nidx_base + jj;
        int j = neighidx[nidx];
        {%- for p in params if p.is_type('P', 'RO') %}
        {{- assign(p, 'j', 'j')|indent(4) -}}
        {%- endfor %}
        {# not possible to load per-particle j data #}
        {% for p in params if p.is_type('N', '-') %}
        {{- "// load per-neighbor data" if loop.first -}}
        {{- assign(p, '', 'nidx')|indent(4) -}}
        {%- else -%}
        {%- endfor %}

        // do pairwise calculation
        {{ name }}_pair_kernel(
#if TRACE
          idx, j,
#endif
          {%- for p in params -%}
            {% set outer_loop = loop %}
            {% for n in p.tagged_name() -%}
              {% set comma = not (outer_loop.last and loop.last) %}
              {%- if p.dim == 1 -%}
        {{ '&' if p.is_type('-', 'RW') or p.is_type('-','SUM') }}{{ n }}{{ ', ' if comma }}
              {%- else -%}
        {{ n }}{{ ', ' if comma }}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
        );

        // writeback per-neighbor RW data
        {%- for p in params if p.is_type('N', 'RW') -%}
          {{- assigninv(p,'','nidx')|indent(4) -}}
        {%- endfor %}
      }
    }
  }

  {% for p in params if p.is_type('P', 'SUM') %}
  {{- "// write per-thread accumulators into block-local arrays" if loop.first -}}
    {%- if p.dim > 1 %}
      {%- for k in range(p.dim) %}
  {{ p.name(pre='l_', suf='_block') }}[(lid*{{ p.dim }})+{{ k }}] = {{ p.name(suf='i_delta') }}[{{ k }}];
      {%- endfor %}
    {%- else %}
  {{ p.name(pre='l_', suf='_block') }}[lid] = {{ p.name(suf='i_delta') }};
    {%- endif %}
  {%- else -%}
  {%- endfor %}

  {{ self.memfence() }}

  // local reduction and writeback of per-particle data
  if (idx < N && nneigh > 1 && lid == 0) {
    for (int i=1; i<block_size; i++) {
      {%- for p in params if p.is_type('P', 'SUM') %}
        {%- if p.dim > 1 %}
          {%- for k in range(p.dim) %}
      {{ p.name(suf='i_delta') }}[{{ k }}] += {{ p.name(pre='l_', suf='_block') }}[(i*{{ p.dim }})+{{ k }}];
          {%- endfor %}
        {%- else %}
      {{ p.name(suf='i_delta') }} += {{ p.name(pre='l_', suf='_block') }}[i];
        {%- endif %}
      {%- else -%}
      {%- endfor %}
    }

    {%- for p in params if p.is_type('P', 'SUM') %}
      {%- if p.dim > 1 %}
        {%- for k in range(p.dim) %}
    {{ p.name(pre='d_') }}[(idx*{{ p.dim }})+{{ k }}] += {{ p.name(suf='i_delta') }}[{{ k }}];
        {%- endfor %}
      {%- else %}
    {{ p.name(pre='d_') }}[idx] += {{ p.name(suf='i_delta') }};
      {%- endif %}
    {%- else -%}
    {%- endfor %}
  }

}

#endif

